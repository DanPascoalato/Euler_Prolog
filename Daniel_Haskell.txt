multiplos :: [Int] -> [Int]
multiplos list = [x | x <- list, x `mod` 3 == 0 || x `mod` 5 == 0]

somaMult :: [Int] -> Int
somaMult soma = sum (multiplos soma)

fibs :: [Integer]
fibs = 1 : 2 : [n+m | (n, m) <- zip fibs (tail fibs)]

exercicio2 = sum $ filter (<4000000) $ take 60 $ filter (even) fibs

exercicio3 = last (fatoresPrimos 600851475143)

fatoresPrimos n = fator n primos
  where
    fator n (p:ps) 
        | p*p > n = [n]
        | n `mod` p == 0 = p : fator (n `div` p) (p:ps)
        | otherwise = fator n ps

primos = 2 : filter(null.tail.fatoresPrimos) [3,5..].

exercicio4 = 
  maximum [x | y<-[100..999], z<-[y..999], let x=y*z, let s=show x, s ==reverse s]

exercicio5 = foldr1 lcm [1..20]

exercicio6 = (sum [1..100])^2 - sum (map (^2) [1..100]).

exercicio7 = primos !! 10000

triplos l = [[a,b,c] | m <- [2..limite],
                        n <- [1..(m-1)], 
                        let a = m^2 - n^2, 
                        let b = 2*m*n, 
                        let c = m^2 + n^2,
                        a+b+c==l]
    where limite = floor . sqrt . fromIntegral $ l

exercicio9 = product . head . triplos $ 1000

exercicio10 = sum (takeWhile (< 1000000) primos)
--Author: Daniel Ruiz
